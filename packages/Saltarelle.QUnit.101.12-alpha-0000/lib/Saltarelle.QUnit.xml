<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Saltarelle.QUnit</name>
    </assembly>
    <members>
        <member name="P:QUnit.DoneDetails.Failed">
            <summary>
            The number of failed assertions.
            </summary>
        </member>
        <member name="P:QUnit.DoneDetails.Passed">
            <summary>
            The number of passed assertions.
            </summary>
        </member>
        <member name="P:QUnit.DoneDetails.Total">
            <summary>
            The total number of assertions.
            </summary>
        </member>
        <member name="P:QUnit.DoneDetails.Runtime">
            <summary>
            The time in milliseconds it took tests to run from start to finish.
            </summary>
        </member>
        <member name="P:QUnit.LogDetails.Result">
            <summary>
            The boolean result of an assertion, true means passed, false means failed.
            </summary>
        </member>
        <member name="P:QUnit.LogDetails.Actual">
            <summary>
            One side of a comparision assertion. Can be undefined when ok() is used.
            </summary>
        </member>
        <member name="P:QUnit.LogDetails.Expected">
            <summary>
            One side of a comparision assertion. Can be undefined when ok() is used.
            </summary>
        </member>
        <member name="P:QUnit.LogDetails.Message">
            <summary>
            A string description provided by the assertion.
            </summary>
        </member>
        <member name="P:QUnit.LogDetails.Source">
            <summary>
            The associated stacktrace, either from an exception or pointing to the source of the assertion. Depends on browser support for providing stacktraces, so can be undefined.
            </summary>
        </member>
        <member name="P:QUnit.ModuleDoneDetails.Name">
            <summary>
            Name of this module.
            </summary>
        </member>
        <member name="P:QUnit.ModuleDoneDetails.Failed">
            <summary>
            The number of failed assertions.
            </summary>
        </member>
        <member name="P:QUnit.ModuleDoneDetails.Passed">
            <summary>
            The number of passed assertions.
            </summary>
        </member>
        <member name="P:QUnit.ModuleDoneDetails.Total">
            <summary>
            The total number of assertions.
            </summary>
        </member>
        <member name="P:QUnit.ModuleStartDetails.Name">
            <summary>
            Name of the next module to run.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.AlterTitle">
            <summary>
            By default, QUnit updates document.title to add a checkmark or x-mark to indicate if a testsuite passed or failed. This makes it easy to see a suites result even without looking at a tab's content. If you're dealing with code that tests document.title changes or have some other problem with this feature, set this option to false to disable it.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.Autostart">
            <summary>
            By default, QUnit runs tests when load event is triggered on the window. If you're loading tests asynchronsly, you can set this property to false, then call QUnit.start() once everything is loaded.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.Current">
            <summary>
            This object isn't actually a configuration property, but is listed here anyway, as its exported through QUnit.config. This gives you access to some QUnit internals at runtime.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.Reorder">
            <summary>
            By default, QUnit will run tests first that failed on a previous run. In a large testsuite, this can speed up testing a lot. It can also lead to random errors, in case your testsuite has non-atomic tests, where the order is important. You should fix those issues, instead of disabling reordering!
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.RequireExpects">
            <summary>
            The expect() method is optional by default, though it can be useful to require each test to specify the number of expected assertions. Enabling this option will cause tests to fail, if they don't call expect() at all.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.TestTimeout">
            <summary>
            Specify a global timeout in milliseconds after which all tests will fail with an appropiate message. Useful when async tests aren't finishing, to prevent the testrunner getting stuck. Set to something high, e.g. 30000 (30 seconds) to avoid slow tests to time out by accident.
            </summary>
        </member>
        <member name="P:QUnit.QUnitConfig.UrlConfig">
            <summary>
            This property controls which checkboxes to put into the QUnit toolbar element (below the header). By default, the "noglobals" and "notrycatch" checkboxes are there. By extending this array, you can add your own checkboxes.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Name">
            <summary>
            Name of the test.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Module">
            <summary>
            Name of the current module.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Failed">
            <summary>
            The number of failed assertions.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Passed">
            <summary>
            The number of passed assertions.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Total">
            <summary>
            The total number of assertions.
            </summary>
        </member>
        <member name="P:QUnit.TestDoneDetails.Duration">
            <summary>
            The total runtime, including setup and teardown.
            </summary>
        </member>
        <member name="P:QUnit.TestStartDetails.Name">
            <summary>
            Name of the next test to run.
            </summary>
        </member>
        <member name="P:QUnit.TestStartDetails.Module">
            <summary>
            Name of the current module.
            </summary>
        </member>
        <member name="P:QUnit.UrlConfig.Id">
            <summary>
            Will be used as the config and query-string key.
            </summary>
        </member>
        <member name="P:QUnit.UrlConfig.Label">
            <summary>
            Will be used as the display propery (text in the UI).
            </summary>
        </member>
        <member name="P:QUnit.UrlConfig.Tooltip">
            <summary>
            Will be used as the title attribute, and should explain what the checkbox does.
            </summary>
        </member>
        <member name="M:QUnit.Engine.Start">
            <summary>
            Start running tests again after the testrunner was stopped. When your async test has multiple exit points, call start() for the corresponding number of stop() increments.
            </summary>
        </member>
        <member name="M:QUnit.Engine.Start(System.Int32)">
            <summary>
            Start running tests again after the testrunner was stopped. When your async test has multiple exit points, call start() for the corresponding number of stop() increments.
            </summary>
            <param name="decrement">Optional argument to merge multiple start() calls into one. Use with multiple corrsponding stop() calls.</param>
        </member>
        <member name="M:QUnit.Engine.Stop">
            <summary>
            Stop the testrunner to wait for async tests to run. Call start() to continue. When your async test has multiple exit points, call stop() with the increment argument, corresponding to the number of start() calls you need.
            </summary>
        </member>
        <member name="M:QUnit.Engine.Stop(System.Int32)">
            <summary>
            Stop the testrunner to wait for async tests to run. Call start() to continue. When your async test has multiple exit points, call stop() with the increment argument, corresponding to the number of start() calls you need.
            </summary>
            <param name="increment">Optional argument to merge multiple stop() calls into one. Use with multiple corrsponding start() calls.</param>
        </member>
        <member name="M:QUnit.Engine.Begin(System.Action)">
            <summary>
            Register a callback to fire whenever the test suite begins. QUnit.begin() is called once before running any tests. (a better would've been QUnit.start, but thats already in use elsewhere and can't be changed.)
            </summary>
        </member>
        <member name="M:QUnit.Engine.Done(System.Action{QUnit.DoneDetails})">
            <summary>
            Register a callback to fire whenever the test suite ends.
            </summary>
        </member>
        <member name="M:QUnit.Engine.Init">
            <summary>
            Initialize the test runner. If the runner has already run, calling QUnit.init() will re-initialize the runner, effectively resetting it. This method does not need to be called in the normal use of QUnit. This is useful for being able to use the test runner for multiple batches of dynamically-loaded tests (load a batch of tests, get the results, re-init, load a new batch, etc.).
            </summary>
        </member>
        <member name="M:QUnit.Engine.Log(System.Action{QUnit.LogDetails})">
            <summary>
            Register a callback to fire whenever an assertion completes. This is one of several callbacks QUnit provides. Its intended for integration scenarios like PhantomJS or Jenkins.
            </summary>
        </member>
        <member name="M:QUnit.Engine.ModuleDone(System.Action{QUnit.ModuleDoneDetails})">
            <summary>
            Register a callback to fire whenever a module ends.
            </summary>
        </member>
        <member name="M:QUnit.Engine.ModuleStart(System.Action{QUnit.ModuleStartDetails})">
            <summary>
            Register a callback to fire whenever a module begins.
            </summary>
        </member>
        <member name="M:QUnit.Engine.Reset">
            <summary>
            DEPRECATED: Reset the test fixture in the DOM. This methods is DEPRECATED. Don't use it!
             * Use multiple tests instead of resetting inside a test.
             * Use testStart or testDone for custom cleanup.
             * This method will throw an error in 2.0, and will be removed in 2.1
            Automatically called by QUnit after each test. Can be called by test code, though usually its better to seperate test code with multiple calls to test().
            When QUnit is run in a browser, it looks for #qunit-fixture element. If found, QUnit will store the contained markup before running any test, then restoring that markup after each test. If tests manipulate elements only within one of those elements, they won't affect each other.
            </summary>
        </member>
        <member name="M:QUnit.Engine.TestDone(System.Action{QUnit.TestDoneDetails})">
            <summary>
            Register a callback to fire whenever a test ends.
            </summary>
        </member>
        <member name="M:QUnit.Engine.TestStart(System.Action{QUnit.TestStartDetails})">
            <summary>
            Register a callback to fire whenever a test begins.
            </summary>
        </member>
        <member name="P:QUnit.Engine.Config">
            <summary>
            Configuration for QUnit. QUnit has a bunch of internal configuration defaults, some of which are useful to override. Check the description for each option for details.
            </summary>
        </member>
        <member name="T:QUnit.TestFixtureAttribute">
            <summary>
            This attribute indicates that a class is a QUnit test fixture, and can contain test methods (methods decorated with a <see cref="T:QUnit.TestAttribute"/>).
            </summary>
        </member>
        <member name="T:QUnit.TestAttribute">
            <summary>
            This attribute specifies that a method is a QUnit test. This means that instead of a normal method, a QUnit.test() call will be generated in the (generated) runTests method of the declaring class.
            </summary>
        </member>
    </members>
</doc>
